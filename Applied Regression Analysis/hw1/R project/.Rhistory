sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Calculates a predicted model via the fitted model.
predicted = predict(fitted.model, data.frame(
cover.rel="yes",methods.rel="none", novelamount.rel="first", years=0), type="response")
print(predicted)
mpg %>%
ggplot(aes(
x = drv,
y = class
)) +
geom_count()
knitr::opts_chunk$set(echo = TRUE)
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
df1 = tibble(
x = 1:10,
y = cumsum(x^2)
)
df1 %>%
ggplot(aes(x,y)) +
geom_point() +
labs(
x = expression(italix(x[i]))
)
df1 = tibble(
x = 1:10,
y = cumsum(x^2)
)
df1 %>%
ggplot(aes(x,y)) +
geom_point() +
labs(
x = expression(italic(x[i]))
)
df1 = tibble(
x = 1:10,
y = cumsum(x^2)
)
df1 %>%
ggplot(aes(x,y)) +
geom_point() +
labs(
x = expression(italic(x[i])),
y = expression(italic(sum(x[i]^2, i == 1, n)))
)
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(cardiac) ~ A + W,
data=cardiac.data, family=binomial(link=logit)))
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data, family=binomial(link=logit)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(success) ~ 1,
data=novel.data,
family=binomial(link=logit))
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data, family=binomial(link=logit)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=novel.data,
family=binomial(link=logit))
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=logit)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=logit))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
mpg %>%
group_by(Drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1)
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1)
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1)
mpg
mpg = mpg
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1)
# Calculates a predicted value via the fitted model.
predicted = predict(fitted.model, data.frame(A=2, W=4), type="response")
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=logit)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=logit))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Calculates a predicted value via the fitted model.
predicted = predict(fitted.model, data.frame(A=2, W=4), type="response")
print(predicted)
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1) %>%
mutate(
drive_type = case_when(
drv == "f" ~ "front-wheel drive",
drv == "r" ~ "rear-wheel drive",
drv == "4" ~ "4-wheel drive"
)
) %>%
select(displ, hwy, drv, drive_type)
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1) %>%
mutate(
drive_type = case_when(
drv == "f" ~ "front-wheel drive",
drv == "r" ~ "rear-wheel drive",
drv == "4" ~ "4-wheel drive"
)
) %>%
select(displ, hwy, drv, drive_type)
mpg %>%
ggplot(aes(x =  displ,y = hwy, color = drv))+
geom_point(alpha = 0.3) +
geom_smooth(se = F)
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=probit)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=probit))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Calculates a predicted model via the fitted model.
predicted = predict(fitted.model, data.frame(A=2, W=4), type="response")
print(predicted)
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1) %>%
mutate(
drive_type = case_when(
drv == "f" ~ "front-wheel drive",
drv == "r" ~ "rear-wheel drive",
drv == "4" ~ "4-wheel drive"
)
) %>%
select(displ, hwy, drv, drive_type)
mpg %>%
ggplot(aes(x =  displ,y = hwy, color = drv))+
geom_point(alpha = 0.3) +
geom_smooth(se = F) +
geom_text(
data = label_info,
aes(x =  displ,y = hwy, label = drive_type),
hjust = "right"
)
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1) %>%
mutate(
drive_type = case_when(
drv == "f" ~ "front-wheel drive",
drv == "r" ~ "rear-wheel drive",
drv == "4" ~ "4-wheel drive"
)
) %>%
select(displ, hwy, drv, drive_type)
mpg %>%
ggplot(aes(x =  displ,y = hwy, color = drv))+
geom_point(alpha = 0.3) +
geom_smooth(se = F) +
geom_text(
data = label_info,
aes(x =  displ,y = hwy, label = drive_type),
hjust = "right"
)
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1) %>%
mutate(
drive_type = case_when(
drv == "f" ~ "front-wheel drive",
drv == "r" ~ "rear-wheel drive",
drv == "4" ~ "4-wheel drive"
)
) %>%
select(displ, hwy, drv, drive_type)
mpg %>%
ggplot(aes(x =  displ,y = hwy, color = drv))+
geom_point(alpha = 0.3) +
geom_smooth(se = F) +
geom_text(
data = label_info,
aes(x =  displ,y = hwy, label = drive_type),
hjust = "right", vjust "bottom"
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1) %>%
mutate(
drive_type = case_when(
drv == "f" ~ "front-wheel drive",
drv == "r" ~ "rear-wheel drive",
drv == "4" ~ "4-wheel drive"
)
) %>%
select(displ, hwy, drv, drive_type)
mpg %>%
ggplot(aes(x =  displ,y = hwy, color = drv))+
geom_point(alpha = 0.3) +
geom_smooth(se = F) +
geom_text(
data = label_info,
aes(x =  displ,y = hwy, label = drive_type),
hjust = "right", vjust = "bottom"
)
mpg %>%
group_by(drv) %>%
arrange(desc(displ)) %>%
slice_head(n=1) %>%
mutate(
drive_type = case_when(
drv == "f" ~ "front-wheel drive",
drv == "r" ~ "rear-wheel drive",
drv == "4" ~ "4-wheel drive"
)
) %>%
select(displ, hwy, drv, drive_type)
mpg %>%
ggplot(aes(x =  displ,y = hwy, color = drv))+
geom_point(alpha = 0.3) +
geom_smooth(se = F) +
geom_text(
aes(x =  displ,y = hwy, label = drive_type),
hjust = "right", vjust = "bottom"
)
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=probit)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=probit))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Calculates a predicted model via the fitted model.
predicted = predict(fitted.model, data.frame(A=2, W=4), type="response")
print(predicted)
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=cloglog)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=cloglog))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=cloglog)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=cloglog))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=cloglog)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=cloglog))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=probit)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=probit))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Calculates a predicted model via the fitted model.
predicted = predict(fitted.model, data.frame(A=2, W=4), type="response")
print(predicted)
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=cloglog)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=cloglog))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Calculates a predicted model via the fitted model.
predicted = predict(fitted.model, data.frame(A=2, W=4), type="response")
print(predicted)
knitr::opts_chunk$set(echo = TRUE)
# Summon and relevel data.
cardiac.data = read.csv(file="C:/Users/3sekk/Desktop/fall 23 stats/410/Data_for_Exercises/Exercise3.5Data.csv",
header=TRUE, sep=",")
# Develop logistic model.
# Note that R can't use the "cardiac" variables at-base since they're strings.
# factor(sucess) converts success from string to levels.
summary(fitted.model<- glm(factor(group) ~ A + W,
data=cardiac.data,
family=binomial(link=cloglog)))
# Calculate AICC, BIC.
p = 3
n = 48
AICC = -2*logLik(fitted.model)+2*p*n/(n-p-1)
# Sprintf is used to make the output clearer.
sprintf("The AICC is %s.", AICC)
sprintf("The BIC is %s.", BIC(fitted.model))
# Develop null model.
null.model = glm(factor(group) ~ 1,
data=cardiac.data,
family=binomial(link=cloglog))
# Deviance test.
deviance = -2*(logLik(null.model)-logLik(fitted.model))
deviance_pval = pchisq(deviance,2,lower.tail = FALSE)
sprintf("The deviance test value is %s", deviance)
sprintf("The deviance test p-value is %s", deviance_pval)
# Calculates a predicted model via the fitted model.
predicted = predict(fitted.model, data.frame(A=2, W=4), type="response")
print(predicted)
